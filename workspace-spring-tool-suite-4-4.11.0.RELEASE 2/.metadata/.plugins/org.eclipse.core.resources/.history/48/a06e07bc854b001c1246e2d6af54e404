package com.dbs.springbootjdbctemplate.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.dbs.springbootjdbctemplate.dto.Employee;
import com.dbs.springbootjdbctemplate.service.EmployeeService;

@RestController
@RequestMapping("/employee") //it will apply controller level mapping this approach will help us to separate stuff
public class EmployeeController {
	
	//controller should talk to service
	@Autowired
	EmployeeService employeeService;
	
	@GetMapping("/test")
	public String test()
	{
		return "test";
	}
	
	//to add new employee record
	@PostMapping("/create")//json to javaobject
	public ResponseEntity<?> addEmployee(@RequestBody Employee employee)
	{
		
		Optional  optional = employeeService.getEmployeeById(employee.getEmpId());
		if(optional.isPresent())
		{
			Map<String, String> map = new HashMap<>();
			map.put("message", "record already exists");
			return ResponseEntity.status(400).body(map);
		}
				
			
				
		Employee employee1 = employeeService.CreateEmployee(employee);
		if(employee1!=null) {
		return ResponseEntity.status(201).body(employee);
		}
		else
		{
			return ResponseEntity.status(400).body("details are not proper");
		}
		
		
		
		//javaobject to json 
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<Employee> getEmployeeById(@PathVariable ("id")int id) {
		
		Optional<Employee> optional = employeeService.getEmployeeById(id);
		
		if(optional.isPresent())
		{
			return ResponseEntity.status(200).body(optional.get());
			
		}
		else
		{
			return ResponseEntity.noContent().build();
		}
		
	
}
	@DeleteMapping("/{id}")
	public void  DeleteEmployee(@PathVariable("id") int id)
	{
		 employeeService.DeleteEmployee(id);
		
		 
	}
		 
	
	@DeleteMapping
	public void deleteAll() {
		employeeService.deleteAll();	
		
	}
	
	@GetMapping("/all")
	public Optional<List<Employee>> getEmployees(){
		return employeeService.getEmployees();
	}
	
	
	
	

}
